LeetCode-20 -->Valid Paranthesis

Explanation -->Here we create a stack and travese the String by converting it into chararray ,if it the char is ( or [ or { we push it ito stack 
               else which means the character is either ) or ] or} so we pop the topmost character in the stack if it is not its opening bracket or
               if the stack is empty then we return false.

class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack=new Stack<>();
        for(char c:s.toCharArray())
        {
          if(c=='(')
          {
              stack.push(')');
          }
          else if(c=='[')
          {
              stack.push(']');
          }
          else if(c=='{')
          {
              stack.push('}');
          }
          else if(stack.isEmpty() ||stack.pop()!=c)
          {
              return false;
          }
        }
        return stack.isEmpty();
        
    }
}
